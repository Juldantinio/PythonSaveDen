Сідлецький Д. В. Лаба №8 індивідуальні завдання
#1.1
import numpy as np
n=int(input())
a=np.zeros((n),dtype=int) #ініціалізуємо матрицю з нулів
for i in range(n):
    a[i]=int(input(f'{i+1}=')) #вводимо елементи матриці
    b = a[::-1] #надаємо b значення а, але у зворотньому порядку за доп. оператора доступа до елементів
print(a)

#1.2
import numpy as np
n,m=int(input()),int(input())
a=np.zeros((n,m),dtype=int) #ініціалізуємо матрицю з нулів
for i in range(n):
    for j in range(m):
        a[j,i]=int(input(f'{i+1}{j+1}=')) #вводимо елементи матриці; індекси 'i' та 'j' міняємо місцями, тоді матриця
                                          #яку ввів користувач стане транспонованою
print(a)

#1.3
import numpy as np
n,m=int(input()),int(input())
a=np.zeros((n,m),dtype=int) #ініціалізуємо матрицю 1 з нулів
for i in range(n):
    for j in range(m):
        a[i,j]=int(input(f'A[{i+1},{j+1}]='))
n,m=int(input()),int(input())
b=np.zeros((n,m),dtype=int) #ініціалізуємо матрицю 2 з нулів
for i in range(n):
    for j in range(m):
        b[i,j]=int(input(f'B[{i+1},{j+1}]='))
n,m=int(input()),int(input())
c=np.zeros((n,m),dtype=int) #ініціалізуємо матрицю 3 з нулів
for i in range(len(a)): #'i'- кількість рядків; 'len(a)'- кількість елементів матриці А
    for j in range(len(b[i])): #'j'- кількість стовпців; 'len(b[i])'- кількість елементів у рядку матриці В
        for k in range(len(b)): #'k'- кількість рядків; 'len(b)'- кількість елементів матриці B
            c[i][j]+=a[i][k]*b[k][j] #елементи рядків матриці множаться на елементи стовпців матриці і додаються
print(c)

#1.4
import numpy as np
n,m=int(input()),int(input())
a=np.zeros((n,m),dtype=int) #ініціалізуємо матрицю з нулів
for i in range(n):
    for j in range(m):
        a[i,j]=int(input(f'A[{i+1},{j+1}]=')) #вводимо елементи матриці
        for i in range(n):
            for j in range(m):
                if a[i,j]<0: #якщо елемент матриці < 0, замінюємо його на нуль
                    a[i,j]=0
print(a)

#2.1
import random  #імпортуємо бібліотеку random
m = [random.randint(1,10) for i in range(10)]  #генерація масиву з випадкових чисел
print(m)
value = int(input('Що знайти? = '))
def linearSearch(m, value):  #лінійний пошук
    i = 0
    n = len(m)
    while i < n: #поки і < кількості елементів
        if m[i] == value: #якщо елемент = шуканому
            return i #повертаємо і
        else:
            i += 1 #до і додається + 1
    return 'Такого числа не існує'
print(linearSearch(m,value)+1)

#2.2
import random #імпортуємо бібліотеку random
n = [random.randint(1,10) for i in range(10)] #генерація масиву з випадкових чисел
n = sorted(n) #сортування елементів у порядку зростання
print(n)
value = int(input('Що знайти = '))
m = len(n) // 2 #бінарний пошук
l = 0
h = len(n) - 1
while n[m] != value and l <= h: #поки елемент що не = шуканому, і довжина <= 0
    if value > n[m]: #якщо шуканий елемент > позиції елемента
        l = m + 1
    else:
        h = m - 1
    m = (l + h) // 2
if l > h: #якщо l набула більшого знач ніж сума кількості елементів списку
    print("Такого елемента не існує")
else:
    print("Позиция елемента :", m+1)

#2.3
import string #імпортуємо бібліотеку string
import random #імпортуємо бібліотеку random
a = string.ascii_lowercase #усі маленькі букви
b = string.ascii_uppercase #усі великі букви
t_up = [random.choice(b) for i in range(10)] #генерація масиву з випадкових великих букв
t_low = [random.choice(a) for j in range(10)] #генерація масиву з випадкових маленьких букв
txt = t_low + t_up #об'єднання масивів маленьких та великих букв
print(txt)
value = str(input('Що знайти = ? '))  #елемент, який потрібно знайти
def underSearch(txt, value): #прямий пошук
    n = len(txt)
    m = len(value)
    for i in range(n - m + 1):
        j = 0
        while (j < m): #поки кількість елементів масиву > 0
            if (txt[i + j] != value[j]): #якщо масив не = шуканому елементу
                break
            j += 1
        if (j == m): #якщо кількість елементів = 0
            return i
    'Такого елемента не існує'
print(underSearch(txt, value)+1)



